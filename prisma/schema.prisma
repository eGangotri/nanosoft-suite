generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Account          Account[]
  Leave_Approval   LeaveApproval[]
  Leave_Balance    LeaveBalance[]
  Leave_Request    LeaveRequest[]
  Session          Session[]
  User_Role        User_Role[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  level     Int
  User_Role User_Role[]
}

model User_Role {
  user_id String
  role_id Int
  Role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

enum UserRole {
  EMPLOYEE
  MANAGER
  SUPERVISOR
  ADMIN
  SUPERADMIN
}

// Define the Gender enum
enum Gender {
  Male
  Female
}

// Define the Race enum
enum Race {
  Chinese
  Malay
  Indian
  Other
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
  Defacto
}

enum CitizenshipStatus {
  Citizen
  PR
  Foreigner
}

model Employee {
  id                Int                        @id @default(autoincrement())
  firstName         String
  lastName          String
  designation       String
  dateOfBirth       DateTime                   @db.Date
  nationality       String
  email             String                     @unique
  mobile            String
  citizenshipStatus CitizenshipStatus
  nricOrFinNo       String                     @unique
  expiryDate        DateTime?                  @db.Date
  maritalStatus     String
  addressLine1      String
  addressLine2      String?
  city              String
  country           String
  postalCode        String
  active            Boolean                    @default(true)
  deleted           Boolean                    @default(false)
  middleName        String?
  bankDetails       EmployeeBankDetails?
  emergencyContacts EmployeeEmergencyContact[]
  hrDetails         EmployeeHrDetails?
  leaveBalances     EmployeeLeaveBalance[]
  workHistory       EmployeeWorkHistory[]
  gender            Gender
  race              Race

  @@map("employee")
}

model EmployeeBankDetails {
  id                  Int      @id @default(autoincrement())
  employeeId          Int      @unique
  bankName            String   @db.VarChar(255)
  employeeBankingName String   @db.VarChar(255)
  accountNumber       String   @db.VarChar(50)
  accountType         String   @db.VarChar(10)
  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employeebankdetails")
}

model EmployeeEmergencyContact {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  personName   String   @db.VarChar(255)
  relationship String   @db.VarChar(10)
  mobile       String   @db.VarChar(15)
  address      String
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employeeemergencycontact")
}

model EmployeeHrDetails {
  id                 Int       @id @default(autoincrement())
  employeeId         Int       @unique
  dateOfJoining      DateTime  @db.Date
  bonus              Decimal   @db.Decimal(10, 2)
  passportNumber     String    @db.VarChar(20)
  passportIssueDate  DateTime  @db.Date
  passportExpiryDate DateTime  @db.Date
  passType           String
  passExpiryDate     DateTime? @db.Date
  renewalApplyDate   DateTime? @db.Date
  newApplyDate       DateTime? @db.Date
  passCancelledDate  DateTime? @db.Date
  clientId           Int?
  remarks            String?
  employee           Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client             Client?   @relation(fields: [clientId], references: [id], onUpdate: NoAction, map: "fk_employee_hr_details_client")
  salary             Decimal   @default(0) @db.Decimal(10, 2)

  @@index([clientId], map: "idx_employee_hr_details_client_id")
  @@map("employeehrdetails")
}

model EmployeeWorkHistory {
  id               Int       @id @default(autoincrement())
  employeeId       Int
  jobTitle         String    @db.VarChar(255)
  startDate        DateTime  @db.Date
  endDate          DateTime? @db.Date
  department       String?   @db.VarChar(255)
  responsibilities String?
  technologiesUsed String?
  employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employeeworkhistory")
}

model Client {
  id                Int                 @id @default(autoincrement())
  companyName       String              @db.VarChar(100)
  industry          String?             @db.VarChar(50)
  primaryContact    String?             @db.VarChar(100)
  contactEmail      String?             @db.VarChar(100)
  contactPhone      String?             @db.VarChar(20)
  currentOpenings   Int?                @default(0)
  lastContactDate   DateTime?           @db.Date
  nextFollowUp      DateTime?           @db.Date
  status            String?             @db.VarChar(20)
  notes             String?
  employeeHrDetails EmployeeHrDetails[]

  @@map("client")
}

model LeaveApproval {
  id             Int           @id @default(autoincrement())
  leaveRequestId Int?          
  approvedBy     String?       
  status         String?
  actionDate     DateTime?     @default(now()) @db.Timestamp(6)
  user           User?         @relation(fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leaveRequest   LeaveRequest? @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leaveapproval")
}

model LeaveBalance {
  id          Int        @id @default(autoincrement())
  userId      String?    
  leaveTypeId Int?       
  balance     Int
  leaveType   LeaveType? @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leavebalance")
}

model LeaveRequest {
  id            Int             @id @default(autoincrement())
  userId        String?        
  leaveTypeId   Int?           
  startDate     DateTime        @db.Date
  endDate       DateTime        @db.Date
  reason        String?
  status        String?         @default("Pending")
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
  leaveApproval LeaveApproval[]
  leaveType     LeaveType?      @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leaverequest")
}

model LeaveType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "name_unique")
  description          String?
  defaultDays          Int                    
  leaveCode            String?                 @db.VarChar(5)
  leaveBalances        LeaveBalance[]
  leaveRequests        LeaveRequest[]
  employeeLeaveBalance EmployeeLeaveBalance[]

  @@map("leavetype")
}

model EmployeeLeaveBalance {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  leaveTypeId Int      
  balance     Int
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employeeId, leaveTypeId])
  @@map("employeeleavebalances")
}
