generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                         Int                          @id @default(autoincrement())
  firstName                  String                       @map("first_name")
  lastName                   String                       @map("last_name")
  designation                String
  dateOfBirth                DateTime                     @map("date_of_birth") @db.Date
  nationality                String
  email                      String                       @unique
  mobile                     String
  citizenshipStatus          String                       @map("citizenship_status")
  nricOrFinNo                String                       @unique @map("nric_or_fin_no")
  expiryDate                 DateTime?                    @map("expiry_date") @db.Date
  maritalStatus              String                       @map("marital_status")
  addressLine1               String                       @map("address_line1")
  addressLine2               String?                      @map("address_line2")
  city                       String
  country                    String
  postalCode                 String                       @map("postal_code")
  active                     Boolean                      @default(true)
  deleted                    Boolean                      @default(false)
  middleName                 String?                      @map("middle_name")
  employee_bank_details      employee_bank_details[]
  employee_emergency_contact employee_emergency_contact[]
  employee_hr_details        employee_hr_details[]
  employee_leave_balances    employee_leave_balances[]
  employee_work_history      employee_work_history[]

  @@map("employee")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Account          Account[]
  Leave_Approval   Leave_Approval[]
  Leave_Balance    Leave_Balance[]
  Leave_Request    Leave_Request[]
  Session          Session[]
  User_Role        User_Role[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model employee_bank_details {
  id                    Int      @id @default(autoincrement())
  employee_id           Int
  bank_name             String   @db.VarChar(255)
  employee_banking_name String   @db.VarChar(255)
  account_number        String   @db.VarChar(50)
  account_type          String   @db.VarChar(10)
  employee              Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model employee_emergency_contact {
  id           Int      @id @default(autoincrement())
  employee_id  Int
  person_name  String   @db.VarChar(255)
  relationship String   @db.VarChar(10)
  mobile       String   @db.VarChar(15)
  address      String
  employee     Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model employee_hr_details {
  id                   Int       @id @default(autoincrement())
  employee_id          Int
  date_of_joining      DateTime  @db.Date
  bonus                Decimal   @db.Decimal(10, 2)
  passport_number      String    @db.VarChar(20)
  passport_issue_date  DateTime  @db.Date
  passport_expiry_date DateTime  @db.Date
  pass_type            String    @db.VarChar(5)
  pass_expiry_date     DateTime? @db.Date
  renewal_apply_date   DateTime? @db.Date
  new_apply_date       DateTime? @db.Date
  pass_cancelled_date  DateTime? @db.Date
  client_id            Int?
  remarks              String?
  employee             Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client               client?   @relation(fields: [client_id], references: [id], onUpdate: NoAction, map: "fk_employee_hr_details_client")

  @@index([client_id], map: "idx_employee_hr_details_client_id")
}

model employee_work_history {
  id                Int       @id @default(autoincrement())
  employee_id       Int
  job_title         String    @db.VarChar(255)
  start_date        DateTime  @db.Date
  end_date          DateTime? @db.Date
  department        String?   @db.VarChar(255)
  responsibilities  String?
  technologies_used String?
  employee          Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model client {
  id                  Int                   @id @default(autoincrement())
  company_name        String                @db.VarChar(100)
  industry            String?               @db.VarChar(50)
  primary_contact     String?               @db.VarChar(100)
  contact_email       String?               @db.VarChar(100)
  contact_phone       String?               @db.VarChar(20)
  current_openings    Int?                  @default(0)
  last_contact_date   DateTime?             @db.Date
  next_follow_up      DateTime?             @db.Date
  status              String?               @db.VarChar(20)
  notes               String?
  employee_hr_details employee_hr_details[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Leave_Approval {
  id               Int            @id @default(autoincrement())
  leave_request_id Int?
  approved_by      String?
  status           String?
  action_date      DateTime?      @default(now()) @db.Timestamp(6)
  User             User?          @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Leave_Request    Leave_Request? @relation(fields: [leave_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Leave_Balance {
  id            Int         @id @default(autoincrement())
  user_id       String?
  leave_type_id Int?
  balance       Int
  Leave_Type    Leave_Type? @relation(fields: [leave_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User          User?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Leave_Request {
  id             Int              @id @default(autoincrement())
  user_id        String?
  leave_type_id  Int?
  start_date     DateTime         @db.Date
  end_date       DateTime         @db.Date
  reason         String?
  status         String?          @default("Pending")
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  Leave_Approval Leave_Approval[]
  Leave_Type     Leave_Type?      @relation(fields: [leave_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User           User?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Leave_Type {
  id                      Int                       @id @default(autoincrement())
  name                    String
  description             String?
  default_days            Int
  Leave_Balance           Leave_Balance[]
  Leave_Request           Leave_Request[]
  employee_leave_balances employee_leave_balances[]
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  level     Int
  User_Role User_Role[]
}

model User_Role {
  user_id String
  role_id Int
  Role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model employee_leave_balances {
  id            Int        @id @default(autoincrement())
  employee_id   Int
  leave_type_id Int
  balance       Int
  employee      Employee   @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Leave_Type    Leave_Type @relation(fields: [leave_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employee_id, leave_type_id])
}

enum UserRole {
  EMPLOYEE
  MANAGER
  SUPERVISOR
  ADMIN
  SUPERADMIN
}
