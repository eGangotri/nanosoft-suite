generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  tenantId         Int
  Account          Account[]
  Session          Session[]
  Tenant           Tenant        @relation(fields: [tenantId], references: [id])
  UserEmployee     UserEmployee?
  UserRole         UserRole[]

  @@unique([email, tenantId])
  @@index([tenantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  level    Int
  UserRole UserRole[]
}

model Client {
  id                       Int                        @id(map: "client_pkey") @default(autoincrement())
  companyName              String                     @db.VarChar(100)
  industry                 String?                    @db.VarChar(50)
  primaryContact           String?                    @db.VarChar(100)
  contactEmail             String?                    @db.VarChar(100)
  contactPhone             String?                    @db.VarChar(20)
  currentOpenings          Int?                       @default(0)
  lastContactDate          DateTime?                  @db.Date
  nextFollowUp             DateTime?                  @db.Date
  status                   String?                    @db.VarChar(20)
  notes                    String?
  tenantId                 Int
  Tenant                   Tenant                     @relation(fields: [tenantId], references: [id])
  EmployeeHrDetailsClients EmployeeHrDetailsClients[]

  @@unique([companyName, tenantId])
  @@index([tenantId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Employee {
  id                       Int                        @id(map: "employee_pkey") @default(autoincrement())
  firstName                String
  lastName                 String
  designation              String
  dateOfBirth              DateTime                   @db.Date
  nationality              String
  email                    String                     @unique(map: "employee_email_key")
  mobile                   String
  citizenshipStatus        String
  nricOrFinNo              String                     @unique(map: "employee_nric_or_fin_no_key")
  expiryDate               DateTime?                  @db.Date
  maritalStatus            String
  foreignAddressLine1      String?
  foreignAddressLine2      String?
  foreignAddressCity       String?
  foreignAddressCountry    String?
  foreignAddressPostalCode String?
  active                   Boolean                    @default(true)
  deleted                  Boolean                    @default(false)
  middleName               String?
  gender                   String?
  race                     String?
  photo                    String?                    @db.VarChar(255)
  localAddressLine1        String?
  localAddressLine2        String?
  localPostalCode          String                     @db.VarChar(6)
  foreignAddressState      String?
  localAddressLine3        String?
  levelOrUnitNo            String?
  empId                    String?
  tenantId                 Int
  Tenant                   Tenant                     @relation(fields: [tenantId], references: [id])
  EmployeeBankDetails      EmployeeBankDetails?
  EmployeeEmergencyContact EmployeeEmergencyContact[]
  EmployeeHrDetails        EmployeeHrDetails?
  EmployeeLeaveBalance     EmployeeLeaveBalance[]
  EmployeeWorkHistory      EmployeeWorkHistory[]
  Leave                    Leave[]
  Payslip                  Payslip[]
  TaxInformation           TaxInformation[]
  UserEmployee             UserEmployee?

  @@unique([email, tenantId])
  @@unique([nricOrFinNo, tenantId])
  @@index([tenantId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EmployeeBankDetails {
  id                  Int      @id(map: "employee_bank_details_pkey") @default(autoincrement())
  employeeId          Int      @unique(map: "employee_bank_details_employee_id_key")
  bankName            String   @db.VarChar(255)
  employeeBankingName String   @db.VarChar(255)
  accountNumber       String   @db.VarChar(50)
  accountType         String   @db.VarChar(10)
  tenantId            Int
  Tenant              Tenant   @relation(fields: [tenantId], references: [id])
  Employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employee_bank_details_employee_id_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EmployeeEmergencyContact {
  id           Int      @id(map: "employee_emergency_contact_pkey") @default(autoincrement())
  employeeId   Int
  personName   String   @db.VarChar(255)
  relationship String   @db.VarChar(10)
  mobile       String   @db.VarChar(15)
  address      String
  tenantId     Int
  Tenant       Tenant   @relation(fields: [tenantId], references: [id])
  Employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employee_emergency_contact_employee_id_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EmployeeHrDetails {
  id                       Int                        @id(map: "employee_hr_details_pkey") @default(autoincrement())
  employeeId               Int                        @unique(map: "employee_hr_details_employee_id_key")
  dateOfJoining            DateTime                   @db.Date
  bonus                    Decimal                    @db.Decimal(10, 2)
  passportNumber           String                     @db.VarChar(20)
  passportIssueDate        DateTime                   @db.Date
  passportExpiryDate       DateTime                   @db.Date
  passType                 String?                    @db.VarChar(5)
  passExpiryDate           DateTime?                  @db.Date
  renewalApplyDate         DateTime?                  @db.Date
  newApplyDate             DateTime?                  @db.Date
  passCancelledDate        DateTime?                  @db.Date
  remarks                  String?
  salary                   Decimal                    @default(0) @db.Decimal(10, 2)
  workpermitNumber         String?                    @db.VarChar(10)
  malaysiaIC               String?                    @db.VarChar(12)
  tenantId                 Int
  Tenant                   Tenant                     @relation(fields: [tenantId], references: [id])
  Employee                 Employee                   @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employee_hr_details_employee_id_fkey")
  EmployeeHrDetailsClients EmployeeHrDetailsClients[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EmployeeLeaveBalance {
  id               Int       @id @default(autoincrement())
  employeeId       Int
  leaveTypeId      Int
  totalEntitlement Int
  usedDays         Int?      @default(0)
  remainingDays    Int?      @default(dbgenerated("(\"totalEntitlement\" - \"usedDays\")"))
  tenantId         Int
  Tenant           Tenant    @relation(fields: [tenantId], references: [id])
  Employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_leave_balances_employee_id_fkey")
  LeaveType        LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_leave_balances_leave_type_id_fkey")

  @@index([employeeId], map: "idx_employeeleavebalance_employee")
  @@index([leaveTypeId], map: "idx_employeeleavebalance_leavetype")
}

model EmployeeWorkHistory {
  id               Int       @id(map: "employee_work_history_pkey") @default(autoincrement())
  employeeId       Int
  jobTitle         String    @db.VarChar(255)
  startDate        DateTime  @db.Date
  endDate          DateTime? @db.Date
  department       String?   @db.VarChar(255)
  responsibilities String?
  technologiesUsed String?
  tenantId         Int
  Tenant           Tenant    @relation(fields: [tenantId], references: [id])
  Employee         Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employee_work_history_employee_id_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model LeaveType {
  id                   Int                    @id(map: "Leave_Type_pkey") @default(autoincrement())
  name                 String                 @unique(map: "name_unique")
  color                String?
  defaultDays          Int
  leaveCode            String?                @db.VarChar(5)
  tenantId             Int
  EmployeeLeaveBalance EmployeeLeaveBalance[]
  Leave                Leave[]
  Tenant               Tenant                 @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
  @@index([tenantId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EmployeeHrDetailsClients {
  id                Int               @id @default(autoincrement())
  employeeHrId      Int
  clientId          Int
  assignedDate      DateTime?         @default(now()) @db.Timestamptz(6)
  Client            Client            @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_client")
  EmployeeHrDetails EmployeeHrDetails @relation(fields: [employeeHrId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_employee_hr_details")

  @@unique([employeeHrId, clientId])
  @@index([clientId], map: "idx_employee_hr_details_clients_client_id")
  @@index([employeeHrId], map: "idx_employee_hr_details_clients_employee_hr_id")
}

model Leave {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  startDate   DateTime  @db.Timestamp(6)
  endDate     DateTime  @db.Timestamp(6)
  leaveTypeId Int
  status      String    @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  tenantId    Int
  Employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LeaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Tenant      Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([tenantId], map: "Leave_tenantId_idx1")
}

model UserEmployee {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  employeeId Int      @unique
  tenantId   Int
  Employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Tenant     Tenant   @relation(fields: [tenantId], references: [id])
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, employeeId])
  @@index([employeeId], map: "idx_useremployee_employeeid")
  @@index([userId], map: "idx_useremployee_userid")
}

model UserRole {
  user_id  String
  role_id  Int
  tenantId Int
  Tenant   Tenant @relation(fields: [tenantId], references: [id])
  Role     Role   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "User_Role_role_id_fkey")
  User     User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "User_Role_user_id_fkey")

  @@id([user_id, role_id], map: "User_Role_pkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Tenant {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(255)
  email                    String                     @db.VarChar(255)
  password                 String                     @db.VarChar(255)
  companyName              String                     @db.VarChar(255)
  uenNo                    String                     @db.VarChar(255)
  entityType               String                     @db.VarChar(255)
  industry                 String                     @db.VarChar(255)
  contactNo                String                     @db.VarChar(255)
  domain                   String                     @unique @db.VarChar(255)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  active                   Boolean                    @default(true)
  deleted                  Boolean                    @default(false)
  Client                   Client[]
  Employee                 Employee[]
  EmployeeBankDetails      EmployeeBankDetails[]
  EmployeeEmergencyContact EmployeeEmergencyContact[]
  EmployeeHrDetails        EmployeeHrDetails[]
  EmployeeLeaveBalance     EmployeeLeaveBalance[]
  EmployeeWorkHistory      EmployeeWorkHistory[]
  Leave                    Leave[]
  LeaveType                LeaveType[]
  User                     User[]
  UserEmployee             UserEmployee[]
  UserRole                 UserRole[]
}

model Payslip {
  id                 Int      @id @default(autoincrement())
  employeeId         Int
  payPeriod          DateTime @db.Timestamp(6)
  basicSalary        Float
  overtime           Float
  allowances         Json     @db.Json
  deductions         Json     @db.Json
  cpfEmployeeContrib Float
  cpfEmployerContrib Float
  grossSalary        Float
  netSalary          Float
  paidLeave          Int
  unpaidLeave        Int
  remarks            String?
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @db.Timestamp(6)
  Employee           Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TaxInformation {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  year          Int
  totalEarnings Float
  taxableIncome Float
  taxPaid       Float
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @db.Timestamp(6)
  Employee      Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRoleType {
  EMPLOYEE
  MANAGER
  SUPERVISOR
  ADMIN
  SUPERADMIN
}
